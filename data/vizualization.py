# Yo, let's import some cool stuff we need
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

def load_data():
    """
    Loads and deserializes data from a CSV file generated by script.py.
    
    Returns:
        pd.DataFrame: A structured, two-dimensional data structure containing the loaded information.
    """
    file_path = "databento/databento_equities_basic.csv"
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The specified file {file_path} does not exist in the current directory hierarchy. Execute script.py to generate the required file.")
    return pd.read_csv(file_path)

def plot_trading_volumes(df):
    """
    Generates a bar plot visualization of trading volumes for each unique symbol in the dataset.
    
    Args:
        df (pd.DataFrame): A pandas DataFrame containing the structured data to be visualized.
    """
    plt.figure(figsize=(12, 6))
    sns.barplot(x=df.index, y='volume', data=df)
    plt.title("Trading Volume by Symbol")
    plt.xlabel("Symbols")
    plt.ylabel("Volume")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("databento/trading_volumes.png")
    plt.close()

def plot_closing_prices(df):
    """
    Creates a line plot visualization depicting the temporal evolution of closing prices for each symbol.
    
    Args:
        df (pd.DataFrame): A pandas DataFrame containing the time series data of closing prices.
    """
    plt.figure(figsize=(12, 6))
    for symbol in df.columns:
        plt.plot(df.index, df[symbol], label=symbol)
    plt.title("Closing Prices by Symbol")
    plt.xlabel("Date")
    plt.ylabel("Closing Price")
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    plt.savefig("databento/closing_prices.png")
    plt.close()

def main():
    """
    The primary execution function that orchestrates the data loading and visualization processes.
    """
    try:
        df = load_data()
        
        # Aw man, no data to work with? That's a bummer.
        if df.empty:
            print("The DataFrame is devoid of data. Visualization operations cannot be performed.")
            return
        
        os.makedirs("databento", exist_ok=True)
        
        plot_trading_volumes(df)
        plot_closing_prices(df)
        
        # Sweet! Our pics are ready to rock!
        print("Visualizations have been successfully generated and stored in the 'databento' directory.")
    except Exception as e:
        print(f"Uh-oh, we hit a snag while making those visualizations: {str(e)}")
        
        

def plot_trading_volumes_terminal(df):
    """
    Generates an ASCII-based bar chart representation of trading volumes for each symbol, optimized for terminal display.
    
    Args:
        df (pd.DataFrame): A pandas DataFrame containing the volume data to be visualized.
    """
    volumes = df['volume'].tolist()
    symbols = df.index.tolist()
    
    max_volume = max(volumes)
    bar_width = 20
    
    # Time to show off those sweet trading numbers!
    print("Check out these trading volumes, yo:")
    for symbol, volume in zip(symbols, volumes):
        bar_length = int((volume / max_volume) * bar_width)
        bar = '█' * bar_length
        print(f"{symbol:<5} | {bar:<{bar_width}} {volume}")

def plot_closing_prices_terminal(df):
    """
    Creates an ASCII-based line chart representation of closing prices for each symbol, designed for terminal output.
    
    Args:
        df (pd.DataFrame): A pandas DataFrame containing the time series data of closing prices.
    """
    # Get ready for some ASCII art magic!
    print("\nClosing prices, comin' at ya:")
    for symbol in df.columns:
        prices = df[symbol].tolist()
        min_price = min(prices)
        max_price = max(prices)
        price_range = max_price - min_price
        
        if price_range == 0:
            normalized_prices = [0] * len(prices)
        else:
            normalized_prices = [(p - min_price) / price_range for p in prices]
        
        chart_width = 40
        chart = ''
        for price in normalized_prices:
            position = int(price * (chart_width - 1))
            line = [' '] * chart_width
            line[position] = '█'
            chart += ''.join(line) + '\n'
        
        print(f"{symbol}:")
        print(chart)
        print(f"Low: {min_price:.2f}, High: {max_price:.2f}\n")

def main():
    """
    The primary execution function that orchestrates the entire data visualization process, including both graphical and terminal-based representations.
    """
    try:
        df = load_data()
        
        # No data? No party. Let's bail.
        if df.empty:
            print("The DataFrame is devoid of data. Visualization operations cannot be performed.")
            return
        
        os.makedirs("databento", exist_ok=True)
        
        plot_trading_volumes(df)
        plot_closing_prices(df)
        
        # Boom! Our masterpieces are ready!
        print("Visualizations have been successfully generated and stored in the 'databento' directory.")
        
        # Let's kick it old school with some terminal visuals
        plot_trading_volumes_terminal(df)
        plot_closing_prices_terminal(df)
        
    except Exception as e:
        print(f"Aw snap, we hit a wall while cookin' up those visualizations: {str(e)}")



if __name__ == "__main__":
    main()
